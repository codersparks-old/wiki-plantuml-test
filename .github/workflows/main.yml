# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  push:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Setup java
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 11
          java-package: jre
        
      - name: Setup dependencies
        run: sudo apt-get install graphviz

      - name: Cache plantuml downloaded file
        uses: actions/cache@v2
        id: cache_plantuml
        with:
          path: plantuml.jar
          key: ${{ runner.os }}-plantuml


      - name: Cache structurizer downloaded files
        uses: actions/cache@v2
        id: cache_structurizr
        with:
          path: |
            structurizr/*.jar
            structurizr/*.sh
          key: ${{ runner.os }}-structurizr
        
      - name: Download plantuml
        if: steps.cache_plantuml.outputs.cache-hit != 'true'
        run: curl -JLO http://sourceforge.net/projects/plantuml/files/plantuml.jar/download

      - name: Download and extract structurizr
        if: steps.cache_structurizr.outputs.cache-hit != 'true'
        run: |
          mkdir structurizr
          pushd structurizr
          wget https://github.com/structurizr/cli/releases/download/v1.5.0/structurizr-cli-1.5.0.zip
          unzip structurizr-cli-1.5.0.zip
        
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          path: main_repo
      
      - name: Parse Structurizr files
        run: structurizr/structurizr.sh export -f plantuml -o main_repo/generated/structurizr/ -w main_repo/src/big-bank-struct/workspace.dsl

      # To provide structure to out generated puml images we need to do some bash magic to output into directories
      - name: Generate images
        run: |
          for puml_file in $(find main_repo/ -name "*.puml" )
          do 
            echo $puml_file
            echo $(pwd)/main_repo/generated/images/$(dirname $( echo $puml_file | cut -d"/" -f3-))/
            java -jar plantuml.jar -o $(pwd)/main_repo/generated/images/$(dirname $( echo $puml_file | cut -d"/" -f3-))/ $puml_file ||  ! break
          done
          
      - name: list dir
        run: ls -l
        
      # The following two are only performed if its a push event and on the main branch (i.e. its the release)
      - name: commit changes if new images have been created on main branch
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          pushd main_repo
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"  
          git add -A
          git commit -am "Auto commit after generating images" || echo "No changes to commit"
          popd
          
      - name: Push changes
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
          directory: main_repo
